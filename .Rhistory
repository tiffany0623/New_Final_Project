pokemon_tree_final_fit %>%
extract_fit_engine() %>%
rpart.plot()
# set up a random forest model
pokemon_rf_model <- rand_forest() %>%
set_engine("ranger", importance = "impurity") %>%
set_mode("classification") %>%
set_args(mtry = tune(), trees = tune(), min_n = tune())
# set up a random forest workflow
pokemon_rf_wf <- workflow() %>%
add_model(pokemon_rf_model) %>%
add_recipe(pokemon_recipe)
# create a regular grid
pokemon_rf_grid <- grid_regular(mtry(range = c(2, 7)),
trees(range = c(10, 1000)),
min_n(range = c(2, 10)),
levels = 8)
# set up a random forest model
pokemon_rf_model <- rand_forest() %>%
set_engine("ranger", importance = "impurity") %>%
set_mode("classification") %>%
set_args(mtry = tune(), trees = tune(), min_n = tune())
# set up a random forest workflow
pokemon_rf_wf <- workflow() %>%
add_model(pokemon_rf_model) %>%
add_recipe(pokemon_recipe)
# create a regular grid
pokemon_rf_grid <- grid_regular(mtry(range = c(2,7)),
trees(range = c(10, 800)),
min_n(range = c(2, 10)),
levels = 8)
pokemon_turn_rf <- tune_grid(pokemon_rf_wf,
resamples = pokemon_fold,
grid = pokemon_rf_grid,
metrics = metric_set(roc_auc))
autoplot(pokemon_turn_rf)
?roc_auc
?function roc_auc
best_rf <- select_best(pokemon_turn_rf, metric='roc_auc')
rf_final <- finalize_workflow(pokemon_rf_wf, best_rf)
rf_final_fit <- fit(rf_final, data=pokemon_train)
rf_final_fit %>%
extract_fit_engine() %>%
vip()
# set up a boosted tree model
boost_spec <- boost_tree() %>%
set_engine("xgboost") %>%
set_args(trees = tune()) %>%
set_mode("classification")
# set up a boosted tree workflow
boost_wf <- workflow() %>%
add_model(boost_spec) %>%
add_recipe(pokemon_recipe)
# Create a regular grid
boost_grid <- grid_regular(trees(range = c(10, 2000)), levels = 10)
tune_boost <- tune_grid(
boost_wf,
resamples = pokemon_fold,
grid = boost_grid,
metrics = metric_set(roc_auc))
rf_model <- rand_forest(min_n = tune(), mtry = tune(), trees = tune()) %>%
set_mode("regression") %>%
set_engine("ranger")
knitr::opts_chunk$set(echo = TRUE,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(tidymodels)
library(ggplot2)
Life_Exp <- read_csv(file = "Life Expectancy Data.csv") %>% na.omit()
Life_Exp
Life_Exp %>%
summarise(average=mean(`Life expectancy`),
maximum=max(`Life expectancy`),
minimum=min(`Life expectancy`))
ggplot(Life_Exp, aes(`Life expectancy`)) +
geom_histogram(bins = 50, color = "white") +
labs(title = "Histogram of Life Expectancy") +
theme_bw()
status_counting <- Life_Exp %>%
group_by(Status) %>%
summarise(Count = n())
ggplot(data = status_counting, aes(x = Status, y = Count)) +
geom_histogram(bins = 50, stat = "identity", fill = c("red", "blue")) +
labs(title="Histogram of Development Status") +
theme_bw()
library(ggstatsplot)
plt <- ggbetweenstats(
data = Life_Exp,
x = Status,
y = "Life expectancy",
plot.type = "box",
type = "p",
conf.level = 0.99,
title = "Parametric test",
bf.message = FALSE,
results.subtitle = FALSE
)
plt <- plt +
# Add labels and title
labs(
x = "Development Status",
y = "Life Expectancy",
title = "Life Expectancy against Development Status"
)
plt
print("result of t test for difference of 2 groups")
t.test(Life_Exp$`Life expectancy`[Life_Exp$Status == "Developing"],
Life_Exp$`Life expectancy`[Life_Exp$Status == "Developed"],
alternative = "less")
# obtain the mean by country
new_data <- Life_Exp
summary_data <- new_data %>%
group_by(Country) %>%
summarize(mean=mean(`Life expectancy`))
library(plotly)
plot <- plot_geo(summary_data, locationmode="country names")%>%
add_trace(locations=~Country,
z=~mean,
color=~mean) %>%
plotly::layout(autosize = T,
title = 'Mean Life Expectancy from 2000-2015 in map',
geo = list(showframe = TRUE,
showcoastlines = TRUE,
projection = list(type = 'Mercator')))
plot
options(repr.plot.width = 20, repr.plot.height = 20)
Life_Exp %>%
group_by(Country) %>%
summarise(mean = mean(`Life expectancy`)) %>%
ggplot(aes(x = mean, y = reorder(Country, mean))) +
geom_bar(stat = 'identity') +
labs(title = 'Mean Life Expectancy from 2000-2015',
x = 'Life Expectancy',
y = 'Countries')
summary_data %>%
arrange(desc(mean))
summary(Life_Exp)
library(GGally)
ggpairs(Life_Exp %>%
select(`Life expectancy`, Year, GDP,
Population, Schooling, `thinness  1-19 years`))
Life_Exp %>%
ggplot(aes(x=Year, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Year vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
knitr::opts_chunk$set(echo = TRUE,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(tidymodels)
library(ggplot2)
Life_Exp <- read_csv(file = "Life Expectancy Data.csv") %>% na.omit()
Life_Exp
Life_Exp %>%
summarise(average=mean(`Life expectancy`),
maximum=max(`Life expectancy`),
minimum=min(`Life expectancy`))
ggplot(Life_Exp, aes(`Life expectancy`)) +
geom_histogram(bins = 50, color = "white") +
labs(title = "Histogram of Life Expectancy") +
theme_bw()
status_counting <- Life_Exp %>%
group_by(Status) %>%
summarise(Count = n())
ggplot(data = status_counting, aes(x = Status, y = Count)) +
geom_histogram(bins = 50, stat = "identity", fill = c("red", "blue")) +
labs(title="Histogram of Development Status") +
theme_bw()
library(ggstatsplot)
plt <- ggbetweenstats(
data = Life_Exp,
x = Status,
y = "Life expectancy",
plot.type = "box",
type = "p",
conf.level = 0.99,
title = "Parametric test",
bf.message = FALSE,
results.subtitle = FALSE
)
plt <- plt +
# Add labels and title
labs(
x = "Development Status",
y = "Life Expectancy",
title = "Life Expectancy against Development Status"
)
plt
print("result of t test for difference of 2 groups")
t.test(Life_Exp$`Life expectancy`[Life_Exp$Status == "Developing"],
Life_Exp$`Life expectancy`[Life_Exp$Status == "Developed"],
alternative = "less")
# obtain the mean by country
new_data <- Life_Exp
summary_data <- new_data %>%
group_by(Country) %>%
summarize(mean=mean(`Life expectancy`))
library(plotly)
plot <- plot_geo(summary_data, locationmode="country names")%>%
add_trace(locations=~Country,
z=~mean,
color=~mean) %>%
plotly::layout(autosize = T,
title = 'Mean Life Expectancy from 2000-2015 in map',
geo = list(showframe = TRUE,
showcoastlines = TRUE,
projection = list(type = 'Mercator')))
plot
options(repr.plot.width = 20, repr.plot.height = 20)
Life_Exp %>%
group_by(Country) %>%
summarise(mean = mean(`Life expectancy`)) %>%
ggplot(aes(x = mean, y = reorder(Country, mean))) +
geom_bar(stat = 'identity') +
labs(title = 'Mean Life Expectancy from 2000-2015',
x = 'Life Expectancy',
y = 'Countries')
summary_data %>%
arrange(desc(mean))
summary(Life_Exp)
library(GGally)
ggpairs(Life_Exp %>%
select(`Life expectancy`, Year, GDP,
Population, Schooling, `thinness  1-19 years`))
Life_Exp %>%
ggplot(aes(x=Year, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Year vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x=`Adult Mortality`, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Adult Mortality vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x=`infant deaths`, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Infant Deaths vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x= Alcohol, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Alcohol vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x=`percentage expenditure`, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Percentage Expenditure vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x=`Hepatitis B`, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Hepatitis B vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x= Measles, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Measles vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x= BMI, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of BMI vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x= `under-five deaths`, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of under-five deaths vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x= Polio, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Polio vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x= `Total expenditure`, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Total expenditure vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x= Diphtheria, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Diphtheria vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x=`HIV/AIDS`, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of HIV/AIDS vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x= GDP, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of GDP vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x= Population, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Population vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x=`thinness  1-19 years`, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of thinness  1-19 years vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x=`thinness 5-9 years`, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of thinness 5-9 years vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x= `Income composition of resources`, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Income composition of resources vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x= Schooling, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Schooling vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
library(corrr)
cor_life_exp <- Life_Exp %>%
select(-Country, -Year, -Status) %>%
correlate()
rplot(cor_life_exp)
ggcorr(
Life_Exp %>% select(-Country, -Year, -Status),
cor_matrix = cor(Life_Exp %>% select(-Country, -Year, -Status), use = "pairwise"),
label = T,
hjust = 0.95,
angle = 0,
size = 4,
layout.exp = 3
)
corrr::correlate(Life_Exp %>%
select(-Country, -Year, -Status, -`infant deaths`,
- `thinness 5-9 years`, -`Total expenditure`)) %>% corrr::network_plot()
library(ISLR)
library(yardstick)
library(readr)
library(discrim)
library(poissonreg)
library(corrr)
library(klaR)
tidymodels_prefer()
library(janitor)
library(glmnet)
library(parsnip)
library(rpart.plot)
library(randomForest)
library(xgboost)
library(ranger)
library(vip)
library(rpart)
library(gridExtra)
library(scales)
library(hablar)
library(hrbrthemes)
library(kknn)
library(readr)
sum(is.na(Life_Exp))
Life_Exp_model <- Life_Exp %>%
clean_names()
head(Life_Exp_model)
Life_Exp_model <- Life_Exp_model%>%
mutate(year = factor(year)) %>%
mutate(status = factor(status, levels = c("Developing", "Developed")))
head(Life_Exp_model)
# set a seed
set.seed(123)
# split the data into a training set and a testing set.
# stratifying on the outcome variable, life_expectancy
Life_split <- initial_split(Life_Exp_model, prop = 0.80, strata = life_expectancy)
Life_train <- training(Life_split)
Life_test <- testing(Life_split)
dim(Life_Exp_model)
dim(Life_train)
dim(Life_test)
# the number of observations for all data
a <- nrow(Life_Exp_model)
# the number of observations for training data
b <- nrow(Life_train)
# the number of observations for test data
c <- nrow(Life_test)
# the percentage of observations for training data
per_train <- b/a
print(paste('the percentage of observations for training data is', per_train))
# the percentage of observations for test data
per_test <- c/a
print(paste('the percentage of observations for test data is', per_test))
Life_train %>%
select(-country)
Life_test %>%
select(-country)
Life_folds <- vfold_cv(Life_train, strata = life_expectancy, v = 5)
Life_folds
Life_recipe <- recipe(life_expectancy ~ year + status + adult_mortality + infant_deaths +
alcohol + percentage_expenditure + hepatitis_b + measles +
bmi + under_five_deaths + polio + total_expenditure + diphtheria +
hiv_aids + gdp + population + thinness_1_19_years +
thinness_5_9_years + income_composition_of_resources + schooling,
data = Life_train) %>%
step_dummy(all_nominal_predictors()) %>%
# create interactions between infant_deaths and under_five_deaths
step_interact(terms = ~infant_deaths:under_five_deaths) %>%
# create interactions between thinness_1_19_years and thinness_5_9_years
step_interact(terms = ~thinness_1_19_years:thinness_5_9_years) %>%
# create interactions between gdp and percentage_expenditure
step_interact(terms = ~gdp:percentage_expenditure) %>%
# center all predictors
step_center(all_nominal_predictors()) %>%
# scale all predictors
step_scale(all_nominal_predictors())
Life_recipe
ridge_model <- linear_reg(penalty = tune(), mixture = 0) %>%
set_mode("regression") %>%
set_engine("glmnet")
ridge_workflow <- workflow() %>%
add_recipe(Life_recipe) %>%
add_model(ridge_model)
penalty_grid <- grid_regular(penalty(range = c(-3, 6)), levels = 20)
ridge_tune_res <- tune_grid(ridge_workflow,
resamples = Life_folds,
grid = penalty_grid
)
ridge_tune_res
autoplot(ridge_tune_res)
Ridge_RMSE <- collect_metrics(ridge_tune_res) %>%
dplyr::select(.metric, mean, std_err)
Ridge_RMSE
best_penalty <- select_best(ridge_tune_res, metric = "rsq")
best_penalty
ridge_final <- finalize_workflow(ridge_workflow, best_penalty)
ridge_final_fit <- fit(ridge_final, data = ec_train)
lasso_spec <- linear_reg(penalty = tune(), mixture = 1) %>%
set_mode("regression") %>%
set_engine("glmnet")
lasso_workflow <- workflow() %>%
add_recipe(Life_recipe) %>%
add_model(lasso_spec)
lasso_tune_res <- tune_grid(
lasso_workflow,
resamples = Life_folds,
grid = penalty_grid
)
lasso_tune_res
autoplot(lasso_tune_res)
rf_model <- rand_forest(min_n = tune(), mtry = tune(), trees = tune()) %>%
set_mode("regression") %>%
set_engine("ranger")
rf_workflow <- workflow() %>%
add_model(rf_model) %>%
add_recipe(Life_recipe)
rf_grid <- grid_regular(mtry(range = c(2,10)),
trees(range = c(100,600)),
min_n(range = c(1,10)),
levels = 10)
tune_rf <- tune_grid(
rf_workflow,
resamples = Life_folds,
grid = rf_grid)
