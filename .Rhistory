grid = pokemon_grid,
metrics = metric_set(roc_auc))
# set up a decision tree model and workflow
pokemon_tree_model <- decision_tree() %>%
set_engine("rpart") %>%
set_mode("classification") %>%
set_args(cost_complexity = tune())
pokemon_wf <- workflow() %>%
add_model(pokemon_tree_model) %>%
add_recipe(pokemon_recipe)
pokemon_grid <- grid_regular(cost_complexity(range = c(-3, -1)), levels = 10)
pokemon_tune_res <- tune_grid(pokemon_wf,
resamples = pokemon_fold,
grid = pokemon_grid,
metrics = metric_set(roc_auc))
# set up a decision tree model and workflow
pokemon_tree_model <- decision_tree() %>%
set_engine("rpart") %>%
set_mode("classification") %>%
set_args(cost_complexity = tune())
pokemon_wf <- workflow() %>%
add_model(pokemon_tree_model) %>%
add_recipe(pokemon_recipe)
pokemon_grid <- grid_regular(cost_complexity(range = c(-3, -1)), levels = 10)
pokemon_tune_res <- tune_grid(pokemon_wf,
resamples = pokemon_fold,
grid = pokemon_grid,
metrics = metric_set(roc_auc))
best_auc <- collect_metrics(pokemon_tune_res) %>%
arrange(desc(mean))
best_auc
# set up a decision tree model and workflow
pokemon_tree_model <- decision_tree() %>%
set_engine("rpart") %>%
set_mode("classification") %>%
set_args(cost_complexity = tune())
pokemon_wf <- workflow() %>%
add_model(pokemon_tree_model) %>%
add_recipe(pokemon_recipe)
pokemon_grid <- grid_regular(cost_complexity(range = c(-3, -1)), levels = 10)
pokemon_tune_res <- tune_grid(pokemon_wf,
resamples = pokemon_fold,
grid = pokemon_grid,
metrics = metric_set(roc_auc))
# fit and visualize the best-performing pruned decision tree with the training set
best_complexity <- select_best(pokemon_tune_res)
best_complexity
pokemon_tree_final <- finalize_workflow(pokemon_wf, best_complexity)
pokemon_tree_final_fit <- fit(pokemon_tree_final, data = pokemon_train)
pokemon_tree_final_fit %>%
extract_fit_engine() %>%
rpart.plot()
# set up a random forest model
pokemon_rf_model <- rand_forest() %>%
set_engine("ranger", importance = "impurity") %>%
set_mode("classification") %>%
set_args(mtry = tune(), trees = tune(), min_n = tune())
# set up a random forest workflow
pokemon_rf_wf <- workflow() %>%
add_model(pokemon_rf_model) %>%
add_recipe(pokemon_recipe)
# create a regular grid
pokemon_rf_grid <- grid_regular(mtry(range = c(2, 7)),
trees(range = c(10, 1000)),
min_n(range = c(2, 10)),
levels = 8)
# set up a random forest model
pokemon_rf_model <- rand_forest() %>%
set_engine("ranger", importance = "impurity") %>%
set_mode("classification") %>%
set_args(mtry = tune(), trees = tune(), min_n = tune())
# set up a random forest workflow
pokemon_rf_wf <- workflow() %>%
add_model(pokemon_rf_model) %>%
add_recipe(pokemon_recipe)
# create a regular grid
pokemon_rf_grid <- grid_regular(mtry(range = c(2,7)),
trees(range = c(10, 800)),
min_n(range = c(2, 10)),
levels = 8)
pokemon_turn_rf <- tune_grid(pokemon_rf_wf,
resamples = pokemon_fold,
grid = pokemon_rf_grid,
metrics = metric_set(roc_auc))
autoplot(pokemon_turn_rf)
?roc_auc
?function roc_auc
best_rf <- select_best(pokemon_turn_rf, metric='roc_auc')
rf_final <- finalize_workflow(pokemon_rf_wf, best_rf)
rf_final_fit <- fit(rf_final, data=pokemon_train)
rf_final_fit %>%
extract_fit_engine() %>%
vip()
# set up a boosted tree model
boost_spec <- boost_tree() %>%
set_engine("xgboost") %>%
set_args(trees = tune()) %>%
set_mode("classification")
# set up a boosted tree workflow
boost_wf <- workflow() %>%
add_model(boost_spec) %>%
add_recipe(pokemon_recipe)
# Create a regular grid
boost_grid <- grid_regular(trees(range = c(10, 2000)), levels = 10)
tune_boost <- tune_grid(
boost_wf,
resamples = pokemon_fold,
grid = boost_grid,
metrics = metric_set(roc_auc))
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE,
results = 'markup',
fig.width = 4,
fig.height = 3,
fig.align = 'center',
message = F,
warning = F)
# packages
library(tidyverse)
library(ggplot2)
library(tidymodels)
library(rsample)
Life_Exp <- read_csv(file = "Life Expectancy Data.csv") %>% na.omit()
Life_Exp
Life_Exp %>%
summarise(average=mean(`Life expectancy`),
maximum=max(`Life expectancy`),
minimum=min(`Life expectancy`))
ggplot(Life_Exp, aes(`Life expectancy`)) +
geom_histogram(bins = 50, color = "white") +
labs(title = "Histogram of Life Expectancy") +
theme_bw()
status_counting <- Life_Exp %>%
group_by(Status) %>%
summarise(Count = n())
ggplot(data = status_counting, aes(x = Status, y = Count)) +
geom_histogram(bins = 50, stat = "identity", fill = c("red", "blue")) +
labs(title="Histogram of Development Status") +
theme_bw()
library(ggstatsplot)
plt <- ggbetweenstats(
data = Life_Exp,
x = Status,
y = "Life expectancy",
plot.type = "box",
type = "p",
conf.level = 0.99,
title = "Parametric test",
bf.message = FALSE,
results.subtitle = FALSE
)
plt <- plt +
# Add labels and title
labs(
x = "Development Status",
y = "Life Expectancy",
title = "Life Expectancy against Development Status"
)
plt
print("result of t test for difference of 2 groups")
t.test(Life_Exp$`Life expectancy`[Life_Exp$Status == "Developing"],
Life_Exp$`Life expectancy`[Life_Exp$Status == "Developed"],
alternative = "less")
# obtain the mean by country
new_data <- Life_Exp
summary_data <- new_data %>%
group_by(Country) %>%
summarize(mean=mean(`Life expectancy`))
library(plotly)
plot <- plot_geo(summary_data, locationmode="country names")%>%
add_trace(locations=~Country,
z=~mean,
color=~mean) %>%
plotly::layout(autosize = T,
title = 'Mean Life Expectancy from 2000-2015 in map',
geo = list(showframe = TRUE,
showcoastlines = TRUE,
projection = list(type = 'Mercator')))
plot
options(repr.plot.width = 20, repr.plot.height = 20)
Life_Exp %>%
group_by(Country) %>%
summarise(mean = mean(`Life expectancy`)) %>%
ggplot(aes(x = mean, y = reorder(Country, mean))) +
geom_bar(stat = 'identity') +
labs(title = 'Mean Life Expectancy from 2000-2015',
x = 'Life Expectancy',
y = 'Countries')
summary_data %>%
arrange(desc(mean))
summary(Life_Exp)
library(GGally)
ggpairs(Life_Exp %>%
select(`Life expectancy`, Year, GDP,
Population, Schooling, `thinness  1-19 years`))
Life_Exp %>%
ggplot(aes(x=Year, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Year vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x=`Adult Mortality`, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Adult Mortality vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x=`infant deaths`, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Infant Deaths vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x= Alcohol, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Alcohol vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x=`percentage expenditure`, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Percentage Expenditure vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x=`Hepatitis B`, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Hepatitis B vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x= Measles, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Measles vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x= BMI, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of BMI vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x= `under-five deaths`, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of under-five deaths vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x= Polio, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Polio vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x= `Total expenditure`, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Total expenditure vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x= Diphtheria, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Diphtheria vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x=`HIV/AIDS`, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of HIV/AIDS vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x= GDP, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of GDP vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x= Population, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Population vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x=`thinness  1-19 years`, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of thinness  1-19 years vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x=`thinness 5-9 years`, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of thinness 5-9 years vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x= `Income composition of resources`, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Income composition of resources vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
Life_Exp %>%
ggplot(aes(x= Schooling, y=`Life expectancy`)) +
geom_point(alpha = 0.2) +
labs(title = 'scatterplot of Schooling vs Life Expectancy') +
geom_smooth(method = 'lm', formula = 'y ~ x') +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
library(corrr)
cor_life_exp <- Life_Exp %>%
select(-Country, -Year, -Status) %>%
correlate()
rplot(cor_life_exp)
ggcorr(
Life_Exp %>% select(-Country, -Year, -Status),
cor_matrix = cor(Life_Exp %>% select(-Country, -Year, -Status), use = "pairwise"),
label = T,
hjust = 0.95,
angle = 0,
size = 4,
layout.exp = 3
)
corrr::correlate(Life_Exp %>%
select(-Country, -Year, -Status, -`infant deaths`,
- `thinness 5-9 years`, -`Total expenditure`)) %>% corrr::network_plot()
Life_Exp  <- Life_Exp  %>%
mutate(Country = factor(Country)) %>%
mutate(Status = factor(Status))
head(Life_Exp)
set.seed(123)
Life_split <- Life_Exp %>%
initial_split(prop = 0.8, strata = "Status")
Life_train <- training(Life_split)
Life_test <- testing(Life_split)
dim(Life_Exp)
dim(Life_train)
dim(Life_test)
# the number of observations for all data
a <- nrow(Life_Exp)
# the number of observations for training data
b <- nrow(Life_train)
# the number of observations for test data
c <- nrow(Life_test)
# the percentage of observations for training data
per_train <- b/a
print(paste('the percentage of observations for training data is', per_train))
# the percentage of observations for test data
per_test <- c/a
print(paste('the percentage of observations for test data is', per_test))
Life_recipe <- recipe(`Life expectancy` ~ `Status` + `Adult Mortality` + `infant deaths` +
Alcohol + `percentage expenditure` + `Hepatitis B` + Measles + BMI +
`under-five deaths` + Polio + `Total expenditure`+
Diphtheria+ `HIV/AIDS` + GDP + Population + `thinness  1-19 years` +
`thinness 5-9 years` + `Income composition of resources` + Schooling,
data = Life_train) %>%
step_dummy(all_nominal_predictors()) %>%
step_normalize(all_predictors()) %>%
step_novel(all_nominal_predictors()) %>%
step_zv(all_nominal_predictors())
Life_folds <- vfold_cv(Life_train, strata = Status, v = 10, repeats = 5)
#set up model
ridge_spec <- linear_reg(penalty = tune(), mixture = 0) %>%
set_mode("regression") %>%
set_engine("glmnet")
#set up workflow
ridge_workflow <- workflow() %>%
add_recipe(Life_recipe) %>%
add_model(ridge_spec)
# Create a regular grid
penalty_grid <- grid_regular(penalty(range = c(-4, 4), trans = log10_trans()), levels = 20)
# Fit the models to the folded data using tune_grid().
tune_res <- tune_grid(
ridge_workflow,
resamples = Life_folds,
grid = penalty_grid
)
# use autoplot() on the results
autoplot(tune_res)
Ridge_RMSE <- collect_metrics(tune_res) %>%
dplyr::select(.metric, mean, std_err)
Ridge_RMSE = Ridge_RMSE[c(1,2),]
best_penalty <- select_best(tune_res, metric = "rsq")
best_penalty
ridge_final <- finalize_workflow(ridge_workflow, best_penalty)
ridge_final_fit <- fit(ridge_final, data = Life_train)
Ridge_Prediction <- predict(ridge_final_fit, new_data = Life_test %>% dplyr::select(-`Life expectancy`))
Ridge_Prediction <- bind_cols(Ridge_Prediction, Life_test %>% dplyr::select(`Life expectancy`))
Ridge_Graph <- Ridge_Prediction %>%
ggplot(aes(x=.pred, y=`Life expectancy`)) + geom_point(alpha = 1) + geom_abline(lty = 2) + theme_bw() + coord_obs_pred()
Ridge_Accuracy <- augment(ridge_final_fit, new_data = Life_test) %>%
rsq(truth = `Life expectancy`, estimate = .pred)
lasso_spec <-
linear_reg(penalty = tune(), mixture = 1) %>%
set_mode("regression") %>%
set_engine("glmnet")
lasso_workflow <- workflow() %>%
add_recipe(Life_recipe) %>%
add_model(lasso_spec)
tune_res_lasso <- tune_grid(
lasso_workflow,
resamples = Life_folds,
grid = penalty_grid
)
autoplot(tune_res_lasso)
Lasso_RMSE <- collect_metrics(tune_res_lasso) %>%
dplyr::select(.metric, mean, std_err) %>%
head(2)
best_penalty_lasso <- select_best(tune_res_lasso, metric = "rsq")
lasso_final <- finalize_workflow(lasso_workflow, best_penalty_lasso)
lasso_final_fit <- fit(lasso_final, data = Life_train)
Lasso_Prediction <- predict(lasso_final_fit, new_data = Life_test %>% dplyr::select(-`Life expectancy`))
Lasso_Prediction <- bind_cols(Lasso_Prediction, Life_test %>% dplyr::select(`Life expectancy`))
Lasso_Graph <- Lasso_Prediction %>%
ggplot(aes(x=.pred, y=`Life expectancy`)) + geom_point(alpha=1) + geom_abline(lty = 2) + theme_bw() + coord_obs_pred()
Lasso_Accuracy <- augment(lasso_final_fit, new_data = Life_test) %>%
rsq(truth = `Life expectancy`, estimate = .pred)
boost_spec <- boost_tree() %>%
set_engine("xgboost") %>%
set_mode("regression")
boost_wf <- workflow() %>%
add_model(boost_spec %>%
set_args(trees = tune())) %>%
add_recipe(Life_recipe)
boost_grid <- grid_regular(trees(range = c(10, 2000)), levels = 50)
boost_tune_res <- tune_grid(
boost_wf,
resamples = Life_folds,
grid = boost_grid,
)
autoplot(boost_tune_res)
Boost_RMSE <- collect_metrics(boost_tune_res) %>%
dplyr::select(.metric, mean, std_err) %>%
head()
best_boost_final <- select_best(boost_tune_res,metric = "rsq")
best_boost_final_model <- finalize_workflow(boost_wf, best_boost_final)
best_boost_final_model_fit <- fit(best_boost_final_model, data = Life_train)
Boost_Prediction <- predict(best_boost_final_model_fit, new_data = Life_test %>% dplyr::select(-`Life expectancy`))
Boost_Prediction <- bind_cols(Boost_Prediction, Life_test %>% dplyr::select(`Life expectancy`))
Boost_Graph <- Boost_Prediction %>%
ggplot(aes(x=.pred, y=`Life expectancy`)) + geom_point(alpha=1) + geom_abline(lty = 2) + theme_bw() + coord_obs_pred()
Boost_Accuracy <- augment(best_boost_final_model_fit, new_data = Life_test) %>%
rsq(truth = `Life expectancy`, estimate = .pred)
tree_spec <-decision_tree() %>%
set_engine("rpart")
class_tree_spec <- tree_spec %>%
set_mode("regression")
class_tree_wf <- workflow() %>%
add_model(class_tree_spec %>% set_args(cost_complexity = tune())) %>%
add_recipe(Life_recipe)
param_grid <- grid_regular(cost_complexity(range = c(-3, 3)), levels = 10)
tune_res_tree <- tune_grid(
class_tree_wf,
resamples = Life_folds,
grid = param_grid,
)
autoplot(tune_res_tree)
Tree_RMSE <- collect_metrics(tune_res_tree) %>%
dplyr::select(.metric, mean, std_err) %>%
head(2)
library(rpart.plot)
best_complexity <- select_best(tune_res_tree, "rsq")
class_tree_final <- finalize_workflow(class_tree_wf, best_complexity)
class_tree_final_fit <- fit(class_tree_final, data = Life_train)
class_tree_final_fit %>%
extract_fit_engine() %>%
rpart.plot()
Tree_Prediction <- predict(class_tree_final_fit, new_data = Life_test %>% dplyr::select(-`Life expectancy`))
Tree_Prediction <- bind_cols(Tree_Prediction, Life_test %>% dplyr::select(`Life expectancy`))
Tree_Graph <- Tree_Prediction %>%
ggplot(aes(x=.pred, y=`Life expectancy`)) + geom_point(alpha=1) + geom_abline(lty = 2) + theme_bw() + coord_obs_pred()
Tree_Accuracy <- augment(class_tree_final_fit, new_data = Life_test) %>%
rsq(truth = `Life expectancy`, estimate = .pred)
library(ggpubr)
figure <- ggarrange(Ridge_Graph, Lasso_Graph, Boost_Graph,Tree_Graph,
labels = c("Ridge", "Lasso", "Boost","Tree"),
ncol = 2, nrow = 2)
figure
head(Ridge_RMSE)
head(Lasso_RMSE)
head(Boost_RMSE, 2)
head(Tree_RMSE,2 )
rsq_comparisons <- bind_rows(Ridge_Accuracy, Lasso_Accuracy, Boost_Accuracy, Tree_Accuracy) %>%
tibble() %>% mutate(model = c("Ridge", "Lasso", "Boost", "Tree")) %>%
dplyr::select(model, .estimate) %>%
arrange(.estimate)
rsq_comparisons
